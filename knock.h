/* SECU-3  - An open source, free engine control unit
   Copyright (C) 2007 Alexey A. Shabelnikov. Ukraine, Gorlovka

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.

   contacts:
              http://secu-3.narod.ru
              email: secu-3@yandex.ru
*/

#ifndef _KNOCK_H_
#define _KNOCK_H_

#include <stdint.h>

//Параметры функций принимают данные в соответствии с форматом регистров 
//HIP9011. Перестройка параметров разрешена только в режиме HOLD!

//Эти три функции могут вызываться в реальном времени и при любых углах
//поворота коленвала. Однако применение устанавливаемого значения начнет происходить
//только после вызова knock_start_settings_latching()
//Установка центральной цастоты полосового фильтра
void knock_set_band_pass(uint8_t freq);
//установка усиления программируемого усилителя
void knock_set_gain(uint8_t gain);
//установка постоянной времени интегратора
void knock_set_int_time_constant(uint8_t inttime);

//Запускает процесс передачи настроек в сигнальный процессор. Должна вызываться 
//при определенных углах поворота коленвала, при которых сигнальный процессор
//находится в состоянии HOLD. Если на момент вызова этой функции процесс загрузки
//еще не закончен, то старый процесс будет прерван и запущен новый, но при этом 
//будет установлен признак ошибки.
void knock_start_settings_latching(void);
//возвращает не 0 если в текущий момент операция загрузки не выполняется
uint8_t knock_is_latching_idle(void);

//Возвращает 1 если была ошибка (микросхема неотвечала или было обнаружено нарушение данных)
uint8_t knock_is_error(void);

//сброс ошибки
void knock_reset_error(void);

//Подготовка канала детонации и его тестирование.
//Возвращает 1 - если тестирование прошло успешно, иначе 0. 
uint8_t knock_module_initialize(void);

//воздействует на вход INT/HOLD HIP-a, устанавливая таким образом  
//либо режим интегрирования, либо режим удерживания.
#define KNOCK_INTMODE_INT  1
#define KNOCK_INTMODE_HOLD 0
void knock_set_integration_mode(uint8_t mode); 

//инициализация используемых портов ввода/вывода
void knock_init_ports(void);

#endif //_KNOCK_H_
